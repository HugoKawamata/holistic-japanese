/* @flow */
import type { AvailableLessons_me_availableCourses_availableLessons_testables as Testable } from "../Learn/__generated__/AvailableLessons";
import type { Results, Result, UserAnswer } from "./types";

export const possibleSokuon = ["k", "g", "s", "z", "t", "d", "h", "b", "p"];

export const romajiHiraganaMap = {
  a: "あ",
  i: "い",
  u: "う",
  e: "え",
  o: "お",
  ka: "か",
  ki: "き",
  ku: "く",
  ke: "け",
  ko: "こ",
  ga: "が",
  gi: "ぎ",
  gu: "ぐ",
  ge: "げ",
  go: "ご",
  sa: "さ",
  shi: "し",
  su: "す",
  se: "せ",
  so: "そ",
  za: "ざ",
  ji: "じ",
  zu: "ず",
  ze: "ぜ",
  zo: "ぞ",
  ta: "た",
  chi: "ち",
  tsu: "つ",
  te: "て",
  to: "と",
  da: "だ",
  dji: "ぢ",
  dzu: "づ",
  de: "で",
  do: "ど",
  na: "な",
  ni: "に",
  nu: "ぬ",
  ne: "ね",
  no: "の",
  ha: "は",
  hi: "ひ",
  fu: "ふ",
  he: "へ",
  ho: "ほ",
  ba: "ば",
  bi: "び",
  bu: "ぶ",
  be: "べ",
  bo: "ぼ",
  pa: "ぱ",
  pi: "ぴ",
  pu: "ぷ",
  pe: "ぺ",
  po: "ぽ",
  ma: "ま",
  mi: "み",
  mu: "む",
  me: "め",
  mo: "も",
  ya: "や",
  yu: "ゆ",
  yo: "よ",
  ra: "ら",
  ri: "り",
  ru: "る",
  re: "れ",
  ro: "ろ",
  wa: "わ",
  wo: "を",
  n: "ん",
  kya: "きゃ",
  kyu: "きゅ",
  kyo: "きょ",
  gya: "ぎゃ",
  gyu: "ぎゅ",
  gyo: "ぎょ",
  sha: "しゃ",
  shu: "しゅ",
  sho: "しょ",
  ja: "じゃ",
  ju: "じゅ",
  jo: "じょ",
  cha: "ちゃ",
  chu: "ちゅ",
  cho: "ちょ",
  nya: "にゃ",
  nyu: "にゅ",
  nyo: "にょ",
  hya: "ひゃ",
  hyu: "ひゅ",
  hyo: "ひょ",
  bya: "びゃ",
  byu: "びゅ",
  byo: "びょ",
  pya: "ぴゃ",
  pyu: "ぴゅ",
  pyo: "ぴょ",
  mya: "みゃ",
  myu: "みゅ",
  myo: "みょ",
  rya: "りゃ",
  ryu: "りゅ",
  ryo: "りょ",
  ー: "ー",
};

export const hiraganaRomajiMap = {
  あ: "a",
  い: "i",
  う: "u",
  え: "e",
  お: "o",
  か: "ka",
  き: "ki",
  く: "ku",
  け: "ke",
  こ: "ko",
  が: "ga",
  ぎ: "gi",
  ぐ: "gu",
  げ: "ge",
  ご: "go",
  さ: "sa",
  し: "shi",
  す: "su",
  せ: "se",
  そ: "so",
  ざ: "za",
  じ: "ji",
  ず: "zu",
  ぜ: "ze",
  ぞ: "zo",
  た: "ta",
  ち: "chi",
  つ: "tsu",
  て: "te",
  と: "to",
  だ: "da",
  ぢ: "dji",
  づ: "dzu",
  で: "de",
  ど: "do",
  な: "na",
  に: "ni",
  ぬ: "nu",
  ね: "ne",
  の: "no",
  は: "ha",
  ひ: "hi",
  ふ: "fu",
  へ: "he",
  ほ: "ho",
  ば: "ba",
  び: "bi",
  ぶ: "bu",
  べ: "be",
  ぼ: "bo",
  ぱ: "pa",
  ぴ: "pi",
  ぷ: "pu",
  ぺ: "pe",
  ぽ: "po",
  ま: "ma",
  み: "mi",
  む: "mu",
  め: "me",
  も: "mo",
  や: "ya",
  ゆ: "yu",
  よ: "yo",
  ら: "ra",
  り: "ri",
  る: "ru",
  れ: "re",
  ろ: "ro",
  わ: "wa",
  を: "wo",
  ん: "n",
  きゃ: "kya",
  きゅ: "kyu",
  きょ: "kyo",
  ぎゃ: "gya",
  ぎゅ: "gyu",
  ぎょ: "gyo",
  しゃ: "sha",
  しゅ: "shu",
  しょ: "sho",
  じゃ: "ja",
  じゅ: "ju",
  じょ: "jo",
  ちゃ: "cha",
  ちゅ: "chu",
  ちょ: "cho",
  にゃ: "nya",
  にゅ: "nyu",
  にょ: "nyo",
  ひゃ: "hya",
  ひゅ: "hyu",
  ひょ: "hyo",
  びゃ: "bya",
  びゅ: "byu",
  びょ: "byo",
  ぴゃ: "pya",
  ぴゅ: "pyu",
  ぴょ: "pyo",
  みゃ: "mya",
  みゅ: "myu",
  みょ: "myo",
  りゃ: "rya",
  りゅ: "ryu",
  りょ: "ryo",
  っ: "ltsu",
  ー: "ー",
};

export const romajiKatakanaMap = {
  a: "ア",
  i: "イ",
  u: "ウ",
  e: "エ",
  o: "オ",
  ka: "カ",
  ki: "キ",
  ku: "ク",
  ke: "ケ",
  ko: "コ",
  ga: "ガ",
  gi: "ギ",
  gu: "グ",
  ge: "ゲ",
  go: "ゴ",
  sa: "サ",
  shi: "シ",
  su: "ス",
  se: "セ",
  so: "ソ",
  za: "ザ",
  ji: "ジ",
  zu: "ズ",
  ze: "ゼ",
  zo: "ゾ",
  ta: "タ",
  chi: "チ",
  tsu: "ツ",
  te: "テ",
  to: "ト",
  da: "ダ",
  dji: "ヂ",
  dzu: "ヅ",
  de: "デ",
  do: "ド",
  na: "ナ",
  ni: "ニ",
  nu: "ヌ",
  ne: "ネ",
  no: "ノ",
  ha: "ハ",
  hi: "ヒ",
  fu: "フ",
  he: "ヘ",
  ho: "ホ",
  ba: "バ",
  bi: "ビ",
  bu: "ブ",
  be: "ベ",
  bo: "ボ",
  pa: "パ",
  pi: "ピ",
  pu: "プ",
  pe: "ペ",
  po: "ポ",
  ma: "マ",
  mi: "ミ",
  mu: "ム",
  me: "メ",
  mo: "モ",
  ya: "ヤ",
  yu: "ユ",
  yo: "ヨ",
  ra: "ラ",
  ri: "リ",
  ru: "ル",
  re: "レ",
  ro: "ロ",
  wa: "ワ",
  wo: "ヲ",
  n: "ン",
  kya: "キャ",
  kyu: "キュ",
  kyo: "キョ",
  gya: "ギャ",
  gyu: "ギュ",
  gyo: "ギョ",
  sha: "シャ",
  shu: "シュ",
  sho: "ショ",
  ja: "ジャ",
  ju: "ジュ",
  jo: "ジョ",
  cha: "チャ",
  chu: "チュ",
  cho: "チョ",
  nya: "ニャ",
  nyu: "ニュ",
  nyo: "ニョ",
  hya: "ヒャ",
  hyu: "ヒュ",
  hyo: "ヒョ",
  bya: "ビャ",
  byu: "ビュ",
  byo: "ビョ",
  pya: "ピャ",
  pyu: "ピュ",
  pyo: "ピョ",
  mya: "ミャ",
  myu: "ミュ",
  myo: "ミョ",
  rya: "リャ",
  ryu: "リュ",
  ryo: "リョ",
  ー: "ー",
};

export const katakanaRomajiMap = {
  ア: "a",
  イ: "i",
  ウ: "u",
  エ: "e",
  オ: "o",
  カ: "ka",
  キ: "ki",
  ク: "ku",
  ケ: "ke",
  コ: "ko",
  ガ: "ga",
  ギ: "gi",
  グ: "gu",
  ゲ: "ge",
  ゴ: "go",
  サ: "sa",
  シ: "shi",
  ス: "su",
  セ: "se",
  ソ: "so",
  ザ: "za",
  ジ: "ji",
  ズ: "zu",
  ゼ: "ze",
  ゾ: "zo",
  タ: "ta",
  チ: "chi",
  ツ: "tsu",
  テ: "te",
  ト: "to",
  ダ: "da",
  ヂ: "dji",
  ヅ: "dzu",
  デ: "de",
  ド: "do",
  ナ: "na",
  ニ: "ni",
  ヌ: "nu",
  ネ: "ne",
  ノ: "no",
  ハ: "ha",
  ヒ: "hi",
  フ: "fu",
  ヘ: "he",
  ホ: "ho",
  バ: "ba",
  ビ: "bi",
  ブ: "bu",
  ベ: "be",
  ボ: "bo",
  パ: "pa",
  ピ: "pi",
  プ: "pu",
  ペ: "pe",
  ポ: "po",
  マ: "ma",
  ミ: "mi",
  ム: "mu",
  メ: "me",
  モ: "mo",
  ヤ: "ya",
  ユ: "yu",
  ヨ: "yo",
  ラ: "ra",
  リ: "ri",
  ル: "ru",
  レ: "re",
  ロ: "ro",
  ワ: "wa",
  ヲ: "wo",
  ン: "n",
  キャ: "kya",
  キュ: "kyu",
  キョ: "kyo",
  ギャ: "gya",
  ギュ: "gyu",
  ギョ: "gyo",
  シャ: "sha",
  シュ: "shu",
  ショ: "sho",
  ジャ: "ja",
  ジュ: "ju",
  ジョ: "jo",
  チャ: "cha",
  チュ: "chu",
  チョ: "cho",
  ニャ: "nya",
  ニュ: "nyu",
  ニョ: "nyo",
  ヒャ: "hya",
  ヒュ: "hyu",
  ヒョ: "hyo",
  ビャ: "bya",
  ビュ: "byu",
  ビョ: "byo",
  ピャ: "pya",
  ピュ: "pyu",
  ピョ: "pyo",
  ミャ: "mya",
  ミュ: "myu",
  ミョ: "myo",
  リャ: "rya",
  リュ: "ryu",
  リョ: "ryo",
  ー: "ー",
};

// This is so that if the user types "n" for anything other than "ん", it doesn't
// move the ref to the next text input field
export const nChecker = (lowerText: string, charRomaji: string) => {
  return (lowerText === "n" && charRomaji === "n") || lowerText !== "n";
};

export const getKeyForTestable = (testable: Testable): string => {
  if (testable.objectType === "TESTABLE") {
    return `testable-${testable.objectId}`;
  }
  if (testable.objectType === "WORD") {
    return testable.question.text;
  }
  return testable.objectId;
};

export const formatResultsForMutation = (results: Results): Array<Result> =>
  Object.keys(results)
    .map((charKey: string) => results[charKey])
    .filter((res) => res.answers.length > 0);

// Stage 0 (show emoji and introduction)
// Stage 1 (show emoji)
// Stage 2 (show no hints)
// Revision words skip stage 1
export const getQuestionStage = (
  currentTestable: Testable,
  results: Results
) => {
  let questionStage = results[getKeyForTestable(currentTestable)].marks.filter(
    (m) => m === "CORRECT"
  ).length;

  // Revision words skip stage 1
  if (currentTestable.introduction == null) {
    questionStage += 1;
  }
  return questionStage;
};

export const getSplitQuestion = (currentTestable: Testable) => {
  if (currentTestable.question.type !== "KANA_WORD") {
    throw new Error("Cannot split a question if it's not a Japanese word");
  }

  let unbrokenQuestion = currentTestable.question.text;
  let splitQuestion = [];

  // We have to go backwards due to lya/lyu/lyo
  while (unbrokenQuestion.length > 0) {
    let current = unbrokenQuestion[unbrokenQuestion.length - 1];
    unbrokenQuestion = unbrokenQuestion.slice(0, unbrokenQuestion.length - 1);
    if (Object.keys(hiraganaRomajiMap).includes(current)) {
      splitQuestion = [current, ...splitQuestion];
    } else {
      current = `${unbrokenQuestion[unbrokenQuestion.length - 1]}${current}`;
      splitQuestion = [current, ...splitQuestion];
    }
  }
  return splitQuestion;
};

export const getCSVAnswer = (userAnswer: UserAnswer) => {
  const userInputs = Object.entries(userAnswer)
    .sort()
    .map((kvPair) => kvPair[1]); // Just get the values out (the user inputs)
  return userInputs.length === 0
    ? ""
    : userInputs.reduce(
        // $FlowFixMe userInput is always a string
        (acc: string, userInput: mixed) => `${acc},${userInput}`
      );
};
